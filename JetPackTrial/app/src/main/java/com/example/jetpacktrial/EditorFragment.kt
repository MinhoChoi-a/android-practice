package com.example.jetpacktrial

import android.app.Activity
import androidx.lifecycle.ViewModelProvider
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.MenuItem
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.InputMethodManager
import androidx.activity.OnBackPressedCallback
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.Observer
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.example.jetpacktrial.databinding.EditorFragmentBinding

class EditorFragment : Fragment() {

    private lateinit var viewModel: EditorViewModel

    //used by for lazy
    private val args:EditorFragmentArgs by navArgs()

    private lateinit var binding: EditorFragmentBinding

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {

        // if supportActionBar is not null, {} will be executed
        (activity as AppCompatActivity).supportActionBar?.let {
            it.setHomeButtonEnabled(true)
            it.setDisplayShowHomeEnabled(true)
            it.setDisplayHomeAsUpEnabled(true)
            it.setHomeAsUpIndicator(R.drawable.ic_launcher_foreground)
        }
        setHasOptionsMenu(true)

        requireActivity().title =
                if(args.noteid == NEW_NOTE_ID) {
                    "New Note"
                } else {
                    "Edit Note"
                }


        viewModel = ViewModelProvider(this).get(EditorViewModel::class.java)

        binding = EditorFragmentBinding.inflate(inflater, container, false)
        binding.editor.setText("")


        //to make back button(back bmotion) act like the top button
        requireActivity().onBackPressedDispatcher.addCallback(
            viewLifecycleOwner,
            object: OnBackPressedCallback(true) {

                override fun handleOnBackPressed() {
                    saveAndReturn()
                }
            }
        )

        //this lambda expression will be triggered when data changes
        viewModel.currentNote.observe(viewLifecycleOwner, Observer {
            binding.editor.setText(it.text)
        })
        viewModel.getNoteById(args.noteid)
        //args value is an instance of the editor fragment args class
        //generated by the safe args library


        return binding.root
        //return inflater.inflate(R.layout.editor_fragment, container, false)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when(item.itemId) {
            android.R.id.home -> saveAndReturn()
            else -> super.onOptionsItemSelected(item)
        }
    }

    private fun saveAndReturn(): Boolean {

        val imm = requireActivity()
                .getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager
        imm.hideSoftInputFromWindow(binding.root.windowToken, 0)

        viewModel.currentNote.value?.text = binding.editor.text.toString()
        viewModel.updateNote()

        //go back to the main fragment
        findNavController().navigateUp()
        return true
    }

    //need to make viewmodel earlier in fragment's lifecycle
    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)
        //viewModel = ViewModelProvider(this).get(EditorViewModel::class.java)
    }

}